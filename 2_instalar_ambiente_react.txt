# Instalar y configurar ambiente react

1. Instalamos nodejs con LTS -> Versión estable
2. Comandos de verificación (node --version y npm -- version)
3. Instalar Yarn - al igual que npm sirve para gestionar paquetes  (npm install --global yarn (y) yarn --version)
4. Gestionar un paquete de Yarn:
    Creamos una carpeta / nos paramos sobre esta y ejecutamos el comando del paquete: (yarn add react-toastify)
    Remover un paquete / yarn remove react-toastify    -> elimina todas las dependencias
5. Instalación de extensiones de chrome:
    - React Developer Tools   / Permite ver la página por componentes(funcion que contiene una parte de un elemento web)
6. Verificar la documentación de React y cambiar el idioma a español con la herramienta de la pagina

7. CDN LINKS PARA REACT https://legacy.reactjs.org/docs/cdn-links.html

    Desarrollo-> <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
                 <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script> 
    Producción-> <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
                 <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
8. Integrar Babel en el navegador
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

https://babeljs.io/setup#installation

y configurar script en html:
<script type="text/babel">
        // Ejemplo en modo declarativo
        const elemento = <h2>Elemento JSX</h2>
        // Creo un elemento ROOT como contenedor
        const contenedor = ReactDOM.createRoot(document.getElementById("principal"));
        // Asociar este elemento dentro del contenedor
        contenedor.render(elemento);
    </script>